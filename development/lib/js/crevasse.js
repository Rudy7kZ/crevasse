// Generated by CoffeeScript 1.3.3
(function() {
  var $, Crevasse,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  $.fn.extend({
    crevasse: function(options) {
      return $(this).each(function() {
        return new Crevasse($(this), options);
      });
    }
  });

  Crevasse = (function() {

    Crevasse.prototype.settings = {
      previewer: null,
      useDefaultEditorStyle: true,
      useDefaultPreviewerStyle: true
    };

    Crevasse.prototype.editor = null;

    Crevasse.prototype.previewer = null;

    function Crevasse($el, options) {
      if (options == null) {
        options = {};
      }
      this._onEditorChange = __bind(this._onEditorChange, this);

      this.options = $.extend({}, this.settings, options);
      if (!$el.is("textarea")) {
        throw "You must initialize on a textarea";
      }
      if (!this.options.previewer) {
        throw "You must provide a previewer element via options";
      }
      this.editor = new Crevasse.Editor($el, this.options);
      this.previewer = new Crevasse.Previewer(this.options.previewer, this.options);
      this.editor.on("change", this._onEditorChange, this);
    }

    Crevasse.prototype._onEditorChange = function() {
      return this.previewer.renderPreview(this.editor.getText(), this.editor.getCaretPosition());
    };

    return Crevasse;

  })();

  Crevasse.Editor = (function() {

    Editor.prototype.options = {};

    Editor.prototype.$el = null;

    Editor.prototype.text = null;

    function Editor($el, options) {
      this.$el = $el;
      this.options = options;
      this._onPaste = __bind(this._onPaste, this);

      this._onInput = __bind(this._onInput, this);

      _.extend(this, Backbone.Events);
      this.$el.addClass("crevasse_editor");
      if (this.options.useDefaultEditorStyle) {
        this.$el.addClass("default_theme");
      }
      this.$el.bind("input", this._onInput);
      this.$el.bind("paste", this._onPaste);
      return this;
    }

    Editor.prototype.getText = function() {
      return this.$el.val();
    };

    Editor.prototype.getCaretPosition = function() {
      return this.$el.caret();
    };

    Editor.prototype._onInput = function(event) {
      if (this.text === this.getText()) {
        return;
      }
      this.text = this.getText();
      return this.trigger("change");
    };

    Editor.prototype._onPaste = function(event) {
      var _this = this;
      return setTimeout((function() {
        return _this.trigger("change");
      }), 20);
    };

    return Editor;

  })();

  Crevasse.Previewer = (function() {

    Previewer.prototype.DIALECT = "Gruber";

    Previewer.prototype.options = {};

    Previewer.prototype.$el = null;

    Previewer.prototype.$previewer = null;

    Previewer.prototype.$offsetDeterminer = null;

    function Previewer($el, options) {
      this.$el = $el;
      this.options = options;
      this.$el.addClass("crevasse_reset");
      this.$previewer = $("<div class='crevasse_previewer'>");
      if (this.options.useDefaultPreviewerStyle) {
        this.$previewer.addClass("github_theme");
      }
      this.$el.append(this.$previewer);
      this.$offsetDeterminer = this.$previewer.clone();
      this.$offsetDeterminer.css({
        width: this.$el.width(),
        height: "auto",
        position: "absolute",
        top: 0,
        left: -10000
      });
      this.$el.append(this.$offsetDeterminer);
      return this;
    }

    Previewer.prototype.renderPreview = function(text, caretPosition) {
      var offset;
      offset = this._determineOffset(text.substr(0, caretPosition));
      this.$previewer.html(markdown.toHTML(text, this.DIALECT));
      if (offset < 0) {
        offset = 0;
      }
      return this.$el.scrollTo(offset, 0);
    };

    Previewer.prototype._determineOffset = function(text) {
      var textHeight;
      this.$offsetDeterminer.html(markdown.toHTML(text, this.DIALECT));
      textHeight = this.$offsetDeterminer.outerHeight();
      return textHeight - this.$el.height() / 2;
    };

    return Previewer;

  })();

}).call(this);
