// Generated by CoffeeScript 1.3.3
(function() {
  var $, Crevasse,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  $.fn.extend({
    crevasse: function(options) {
      return $(this).each(function() {
        return new Crevasse($(this), options);
      });
    }
  });

  Crevasse = (function() {

    Crevasse.prototype.settings = {};

    Crevasse.prototype.container = {
      $el: null,
      width: null,
      height: null
    };

    Crevasse.prototype.editor = null;

    Crevasse.prototype.previewer = null;

    function Crevasse($el, options) {
      if (options == null) {
        options = {};
      }
      this._onEditorChange = __bind(this._onEditorChange, this);

      this.options = $.extend({}, this.settings, options);
      this.container.$el = $el;
      this.container.width = $el.width();
      this.container.height = $el.height();
      this.container.$el.css("overflow", "hidden");
      this.editor = new Crevasse.Editor(this.container.width / 2, this.container.height);
      this.previewer = new Crevasse.Previewer(this.container.width / 2, this.container.height);
      this.editor.on("change", this._onEditorChange, this);
      this._insertIntoContainer();
    }

    Crevasse.prototype._insertIntoContainer = function() {
      this.container.$el.append(this.editor.getEl());
      this.container.$el.append(this.previewer.getEl());
      return this.container.$el.append(this.previewer.getOffsetDeterminer());
    };

    Crevasse.prototype._onEditorChange = function() {
      return this.previewer.renderPreview(this.editor.getText(), this.editor.getCaretPosition());
    };

    return Crevasse;

  })();

  Crevasse.Editor = (function() {

    Editor.prototype.PADDING = 20;

    Editor.prototype.width = null;

    Editor.prototype.height = null;

    Editor.prototype.$el = null;

    Editor.prototype.$textarea = null;

    Editor.prototype.text = null;

    function Editor(width, height) {
      this.width = width;
      this.height = height;
      this._onTextareaPaste = __bind(this._onTextareaPaste, this);

      this._onTextareaInput = __bind(this._onTextareaInput, this);

      _.extend(this, Backbone.Events);
      this.$el = $("<div class='crevasse_editor crevasse_reset'>");
      this.$textarea = $("<textarea>");
      this.$el.css({
        width: this.width,
        height: this.height
      });
      this.$textarea.css({
        width: this.width - this.PADDING * 2,
        height: this.height - this.PADDING * 2,
        padding: this.PADDING
      });
      this.$el.append(this.$textarea);
      this.$textarea.bind("input", this._onTextareaInput);
      this.$textarea.bind("paste", this._onTextareaPaste);
      return this;
    }

    Editor.prototype.getEl = function() {
      return this.$el;
    };

    Editor.prototype.getText = function() {
      return this.$textarea.val();
    };

    Editor.prototype.getCaretPosition = function() {
      return this.$textarea.caret();
    };

    Editor.prototype._onTextareaInput = function(event) {
      if (this.text === this.getText()) {
        return;
      }
      this.text = this.getText();
      return this.trigger("change");
    };

    Editor.prototype._onTextareaPaste = function(event) {
      var _this = this;
      return setTimeout((function() {
        console.log("here");
        return _this.trigger("change");
      }), 20);
    };

    return Editor;

  })();

  Crevasse.Previewer = (function() {

    Previewer.prototype.DIALECT = "Gruber";

    Previewer.prototype.PADDING = 20;

    Previewer.prototype.width = null;

    Previewer.prototype.height = null;

    Previewer.prototype.$el = null;

    Previewer.prototype.$offsetDeterminer = null;

    function Previewer(width, height) {
      this.width = width;
      this.height = height;
      this.$el = $("<div class='crevasse_previewer crevasse_reset'>");
      this.$el.css({
        width: this.width - this.PADDING * 2,
        height: this.height - this.PADDING * 2,
        padding: this.PADDING,
        overflow: "scroll"
      });
      this.$offsetDeterminer = this.$el.clone();
      this.$offsetDeterminer.css({
        height: "auto",
        position: "absolute",
        top: 0,
        left: -10000
      });
      return this;
    }

    Previewer.prototype.getEl = function() {
      return this.$el;
    };

    Previewer.prototype.getOffsetDeterminer = function() {
      return this.$offsetDeterminer;
    };

    Previewer.prototype.renderPreview = function(text, caretPosition) {
      var offset;
      offset = this._determineOffset(text.substr(0, caretPosition));
      this.$el.html(markdown.toHTML(text, this.DIALECT));
      if (offset < 0) {
        offset = 0;
      }
      return this.$el.scrollTo(offset, 0);
    };

    Previewer.prototype._determineOffset = function(text) {
      var textHeight;
      this.$offsetDeterminer.html(markdown.toHTML(text, this.DIALECT));
      textHeight = this.$offsetDeterminer.outerHeight();
      return textHeight - this.height / 2;
    };

    return Previewer;

  })();

}).call(this);
